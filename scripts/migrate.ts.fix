import { drizzle } from 'drizzle-orm/node-postgres';
import pg from 'pg';
import * as schema from '../shared/schema';
import 'dotenv/config';

const { Pool } = pg;

async function migrate() {
  // Kiểm tra biến môi trường
  if (!process.env.DATABASE_URL) {
    console.error('DATABASE_URL environment variable is not set');
    process.exit(1);
  }

  console.log('Migrating database...');

  // Kết nối đến cơ sở dữ liệu
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
  });

  // Tạo schema
  const db = drizzle(pool, { schema });

  try {
    // Xác minh kết nối
    await pool.query('SELECT 1');
    console.log('Database connection successful');

    // Tạo các bảng
    console.log('Creating tables...');
    const createTables = `
    CREATE TABLE IF NOT EXISTS categories (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      slug VARCHAR(255) NOT NULL UNIQUE,
      image TEXT NOT NULL
    );

    CREATE TABLE IF NOT EXISTS products (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      slug VARCHAR(255) NOT NULL UNIQUE,
      description TEXT NOT NULL,
      price DOUBLE PRECISION NOT NULL,
      old_price DOUBLE PRECISION,
      image TEXT NOT NULL,
      category_id INTEGER NOT NULL REFERENCES categories(id),
      rating DOUBLE PRECISION DEFAULT 5,
      is_new BOOLEAN DEFAULT false,
      is_organic BOOLEAN DEFAULT true,
      is_bestseller BOOLEAN DEFAULT false,
      details JSON DEFAULT '[]',
      discount INTEGER,
      has_variants BOOLEAN DEFAULT false,
      created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS product_images (
      id SERIAL PRIMARY KEY,
      product_id INTEGER NOT NULL REFERENCES products(id),
      image_path TEXT NOT NULL,
      is_main BOOLEAN DEFAULT false,
      display_order INTEGER DEFAULT 0,
      created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS product_variants (
      id SERIAL PRIMARY KEY,
      product_id INTEGER NOT NULL REFERENCES products(id),
      name VARCHAR(255) NOT NULL,
      price DOUBLE PRECISION NOT NULL,
      old_price DOUBLE PRECISION,
      sku VARCHAR(255),
      stock INTEGER DEFAULT 0,
      is_default BOOLEAN DEFAULT false,
      created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS blog_posts (
      id SERIAL PRIMARY KEY,
      title VARCHAR(255) NOT NULL,
      slug VARCHAR(255) NOT NULL UNIQUE,
      content TEXT NOT NULL,
      excerpt TEXT NOT NULL,
      image TEXT NOT NULL,
      category VARCHAR(255) NOT NULL,
      tags TEXT,
      author VARCHAR(255),
      meta_title VARCHAR(255),
      meta_description TEXT,
      featured BOOLEAN DEFAULT false,
      status VARCHAR(20) DEFAULT 'published',
      date TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS testimonials (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      avatar TEXT NOT NULL,
      rating INTEGER NOT NULL,
      comment TEXT NOT NULL
    );

    CREATE TABLE IF NOT EXISTS orders (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      phone VARCHAR(50) NOT NULL,
      address TEXT NOT NULL,
      items TEXT NOT NULL,
      total DOUBLE PRECISION NOT NULL,
      status VARCHAR(50) DEFAULT 'pending',
      created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS contacts (
      id SERIAL PRIMARY KEY,
      name VARCHAR(255) NOT NULL,
      email VARCHAR(255) NOT NULL,
      subject VARCHAR(255) NOT NULL,
      message TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT NOW()
    );

    CREATE TABLE IF NOT EXISTS admin_keys (
      id SERIAL PRIMARY KEY,
      key VARCHAR(255) NOT NULL,
      label VARCHAR(255) NOT NULL,
      active BOOLEAN DEFAULT true
    );
    `;

    await pool.query(createTables);
    console.log('Tables created successfully');

    // Tạo dữ liệu mẫu cho danh mục và sản phẩm
    console.log('Creating sample data...');
    
    // Thêm danh mục và lấy ID
    const categories = [
      { name: 'Rau củ', slug: 'rau-cu', image: 'https://images.unsplash.com/photo-1566385101042-1a0aa0c1268c?q=80&w=1000' },
      { name: 'Trái cây', slug: 'trai-cay', image: 'https://images.unsplash.com/photo-1490474418585-ba9bad8fd0ea?q=80&w=1000' },
      { name: 'Thực phẩm hữu cơ', slug: 'thuc-pham-huu-co', image: 'https://images.unsplash.com/photo-1550989460-0adf9ea622e2?q=80&w=1000' }
    ];
    
    const categoryIds = {};
    
    for (const category of categories) {
      const insertCategory = `
      INSERT INTO categories (name, slug, image) 
      VALUES ($1, $2, $3)
      ON CONFLICT (slug) DO NOTHING
      RETURNING id, name;
      `;
      const result = await pool.query(insertCategory, [category.name, category.slug, category.image]);
      
      // Nếu không có dòng trả về, truy vấn lại để lấy ID
      if (result.rows.length === 0) {
        const getCategory = `SELECT id, name FROM categories WHERE slug = $1`;
        const getCategoryResult = await pool.query(getCategory, [category.slug]);
        if (getCategoryResult.rows.length > 0) {
          categoryIds[category.name] = getCategoryResult.rows[0].id;
        }
      } else {
        categoryIds[category.name] = result.rows[0].id;
      }
    }
    
    console.log('Categories created successfully:', categoryIds);
    
    // Thêm sản phẩm với ID danh mục chính xác
    const products = [
      { 
        name: 'Cà rốt hữu cơ', 
        slug: 'ca-rot-huu-co', 
        description: 'Cà rốt hữu cơ tươi ngon, giàu vitamin A', 
        price: 25000, 
        oldPrice: 30000, 
        image: 'https://images.unsplash.com/photo-1447175008436-054170c2e979?q=80&w=1000', 
        categoryName: 'Rau củ' 
      },
      { 
        name: 'Táo đỏ Mỹ', 
        slug: 'tao-do-my', 
        description: 'Táo đỏ nhập khẩu từ Mỹ, giòn ngọt', 
        price: 60000, 
        oldPrice: 70000, 
        image: 'https://images.unsplash.com/photo-1560806887-1e4cd0b6cbd6?q=80&w=1000', 
        categoryName: 'Trái cây' 
      },
      { 
        name: 'Bột yến mạch', 
        slug: 'bot-yen-mach', 
        description: 'Bột yến mạch hữu cơ, không chất bảo quản', 
        price: 80000, 
        oldPrice: 95000, 
        image: 'https://images.unsplash.com/photo-1586765501019-cbe3294828fe?q=80&w=1000', 
        categoryName: 'Thực phẩm hữu cơ' 
      }
    ];
    
    const productIds = {};
    
    for (const product of products) {
      if (!categoryIds[product.categoryName]) {
        console.warn(`Category ${product.categoryName} not found, skipping product ${product.name}`);
        continue;
      }
      
      const insertProduct = `
      INSERT INTO products (name, slug, description, price, old_price, image, category_id, is_organic, has_variants) 
      VALUES ($1, $2, $3, $4, $5, $6, $7, true, true)
      ON CONFLICT (slug) DO NOTHING
      RETURNING id, name;
      `;
      
      const result = await pool.query(
        insertProduct, 
        [product.name, product.slug, product.description, product.price, product.oldPrice, product.image, categoryIds[product.categoryName]]
      );
      
      // Nếu không có dòng trả về, truy vấn lại để lấy ID
      if (result.rows.length === 0) {
        const getProduct = `SELECT id, name FROM products WHERE slug = $1`;
        const getProductResult = await pool.query(getProduct, [product.slug]);
        if (getProductResult.rows.length > 0) {
          productIds[product.name] = getProductResult.rows[0].id;
        }
      } else {
        productIds[product.name] = result.rows[0].id;
      }
    }
    
    console.log('Products created successfully:', productIds);
    
    // Thêm biến thể cho sản phẩm
    for (const productName in productIds) {
      const productId = productIds[productName];
      
      // Biến thể 500gr (mặc định)
      let price500gr = 0;
      let oldPrice500gr = 0;
      
      if (productName === 'Cà rốt hữu cơ') {
        price500gr = 25000;
        oldPrice500gr = 30000;
      } else if (productName === 'Táo đỏ Mỹ') {
        price500gr = 60000;
        oldPrice500gr = 70000;
      } else if (productName === 'Bột yến mạch') {
        price500gr = 80000;
        oldPrice500gr = 95000;
      }
      
      const insertVariant500gr = `
      INSERT INTO product_variants (product_id, name, price, old_price, is_default)
      VALUES ($1, '500gr', $2, $3, true)
      ON CONFLICT DO NOTHING;
      `;
      await pool.query(insertVariant500gr, [productId, price500gr, oldPrice500gr]);
      
      // Biến thể 1kg
      let price1kg = 0;
      let oldPrice1kg = 0;
      
      if (productName === 'Cà rốt hữu cơ') {
        price1kg = 45000;
        oldPrice1kg = 55000;
      } else if (productName === 'Táo đỏ Mỹ') {
        price1kg = 110000;
        oldPrice1kg = 130000;
      } else if (productName === 'Bột yến mạch') {
        price1kg = 150000;
        oldPrice1kg = 180000;
      }
      
      const insertVariant1kg = `
      INSERT INTO product_variants (product_id, name, price, old_price)
      VALUES ($1, '1kg', $2, $3)
      ON CONFLICT DO NOTHING;
      `;
      await pool.query(insertVariant1kg, [productId, price1kg, oldPrice1kg]);
    }
    
    console.log('Product variants created successfully');

    console.log('Migration completed successfully');
  } catch (error) {
    console.error('Migration failed:', error);
    process.exit(1);
  } finally {
    // Đóng kết nối
    await pool.end();
    console.log('Database connection closed');
  }
}

migrate();